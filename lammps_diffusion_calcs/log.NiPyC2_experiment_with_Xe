
# --------------------------------- Initialization -------------------------------------- #
units           real
atom_style      full
boundary        p p p

pair_style      lj/cut 14.000
bond_style      harmonic
angle_style     cosine/periodic
dihedral_style  harmonic
improper_style  fourier

special_bonds   lj/coul 0.0 0.0 1.0
pair_modify     tail no mix arithmetic
#dielectric      1.0
box tilt        large
read_data       data.NiPyC2_experiment_with_Xe
  triclinic box = (0 0 0) to (31.264 37.5702 30.8228) with tilt (0 -0.682783 0)
  1 by 1 by 1 MPI processor grid
  reading atoms ...
  2431 atoms
  scanning bonds ...
  6 = max bonds/atom
  scanning angles ...
  15 = max angles/atom
  scanning dihedrals ...
  8 = max dihedrals/atom
  scanning impropers ...
  3 = max impropers/atom
  reading bonds ...
  2880 bonds
  reading angles ...
  5490 angles
  reading dihedrals ...
  5760 dihedrals
  reading impropers ...
  3780 impropers
  6 = max # of 1-2 neighbors
  9 = max # of 1-3 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.000684133 secs
  read_data CPU = 0.0371017 secs

#### Atom Groupings ####
group           xe       id   55
1 atoms in group xe
group           fram     id   1:54 56:2431
2430 atoms in group fram
#### END Atom Groupings ####

###
# Speed up Calculations by exluding framework-framework interactions
#   since we are keeping the framework rigid and stationary
#
# neigh_modify keyword values ...
# keyword = exclude
# values  = group group1-ID group2-ID
#
# group1-ID, group2-ID = exclude if one atom is in 1st group, other in 2nd
###
neigh_modify exclude group fram fram

# ----------------------------- Variables ---------------------- #
dump            NiPyC2_experiment_with_Xe_xyzmov all xyz 1000 NiPyC2_experiment_with_Xe_mov.xyz
dump_modify     NiPyC2_experiment_with_Xe_xyzmov element Ni O N C H Xe
variable        dt         equal 1.00
variable        tdamp      equal 100*${dt}
variable        tdamp      equal 100*1
variable        eqtemp     equal 298.00

# ------------------------------ Equilibriation -------------------------------------------- #
# we do not need to perform equilibriation since we are using a rigid framework
# and the (single) adsorbate has already been inserted into the material via GCMC
# which already included an equilibriation phase.
#fix             1 xe langevin ${eqtemp} ${eqtemp} ${tdamp} 8646
#fix             2 xe nve
#fix             3 fram langevin 298.00 298.00 ${tdamp} 965287
#fix             4 fram nve
#thermo          0
#run             50000
#unfix           1
#unfix           2
#unfix           3
#unfix           4

# --------------------- Production (data gathering) --------------------------------------- #
# A simple way to hold atoms stationary is to not include those atoms in your time integration.
#reset_timestep  0

fix             3 xe nvt temp ${eqtemp} ${eqtemp} ${tdamp}
fix             3 xe nvt temp 298 ${eqtemp} ${tdamp}
fix             3 xe nvt temp 298 298 ${tdamp}
fix             3 xe nvt temp 298 298 100
#fix             4 fram rigid/nvt group 1 fram temp ${eqtemp} ${eqtemp} ${tdamp} # hold MOF atoms fixed
#fix             6 fram nvt temp 298.00 298.00 ${tdamp}

###
#  mean-squared disp of grp 1
#
# A vector of four quantities is calculated by this compute:
# The first 3 elements of the vector are the squared dx,dy,dz displacements, summed and averaged over atoms in the group.
# The fourth element is the total squared displacement, i.e. (dx*dx + dy*dy + dz*dz),
#  summed and averaged over atoms in the group.
#
# The slope of the MSD versus time is proportional to the diffusion coefficient.
# MSD values can be accumulated in a vector via the fix vector command,
#   and a line fit to the vector to compute its slope via the variable slope function,
#   and thus extract D.
#
# fix ID group-ID vector Nevery value1 value2 ...
#
# c_ID[I] = Ith component of global vector calculated by a compute with ID
# f_ID = global scalar calculated by a fix with ID
# v_name = value calculated by an equal-style variable with name
#
# variable name style args...
#
# The slope() function uses linear regression to fit a line to the set of points,
#   equally spaced by 1 in their x coordinate: (1,V1), (2,V2), â€¦, (N,VN),
#   where the Vi are the values in the global vector of length N.
#   The returned value is the slope of the line.
#   If the line has a single point or is vertical, it returns 1.0e20.
###
compute         msd all msd com yes
#variable        twopoint equal c_msd[4]/6/(step*dt+1.0e-6) # scaled r_sqr(t)... not used? idk what this is for...
fix             5 xe vector 5 c_msd[4]
variable        fitslope equal slope(f_5)/6/(5*dt) # why dividing slope?

thermo_style    custom step v_eqtemp c_msd[4] v_fitslope # prints this info to log file

thermo          5000
run             100000
Neighbor list info ...
  update every 1 steps, delay 10 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 16
  ghost atom cutoff = 16
  binsize = 8, bins = 4 5 4
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton/tri
      stencil: half/bin/3d/newton/tri
      bin: standard
WARNING: Inconsistent image flags (src/domain.cpp:785)
Per MPI rank memory allocation (min/avg/max) = 31.83 | 31.83 | 31.83 Mbytes
Step v_eqtemp c_msd[4] v_fitslope 
       0          298 7.572221e-30 3.3333333e+18 
    5000          298 0.00029532742 2.8146487e-09 
   10000          298 0.00016173486 2.2860171e-09 
   15000          298 9.5979274e-05 1.8836986e-10 
   20000          298 0.00040715404 1.7299023e-10 
   25000          298 0.00020756223 2.9637596e-10 
   30000          298 1.0029512e-05 -3.6546962e-11 
   35000          298 0.00027965815 1.0497096e-11 
   40000          298 0.00010987207 2.1261975e-10 
   45000          298 8.6620405e-06 4.487653e-11 
   50000          298 0.00019184802 3.5440289e-11 
   55000          298 0.00025073619 1.4156713e-10 
   60000          298 1.6807414e-05 1.073004e-10 
   65000          298 6.4019964e-05 2.2739048e-11 
   70000          298 0.00041603247 6.3027375e-11 
   75000          298 6.1881765e-05 5.754579e-11 
   80000          298 0.00014475642 1.0601188e-11 
   85000          298 0.00046117676  1.29227e-11 
   90000          298 0.00013546271 3.2065276e-11 
   95000          298 0.00010863514 9.3856568e-12 
  100000          298 0.00045302322 2.8662571e-12 
Loop time of 82.0938 on 1 procs for 100000 steps with 2431 atoms

Performance: 105.246 ns/day, 0.228 hours/ns, 1218.119 timesteps/s
100.0% CPU use with 1 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 1.7898     | 1.7898     | 1.7898     |   0.0 |  2.18
Bond    | 71.117     | 71.117     | 71.117     |   0.0 | 86.63
Neigh   | 0.067517   | 0.067517   | 0.067517   |   0.0 |  0.08
Comm    | 5.6614     | 5.6614     | 5.6614     |   0.0 |  6.90
Output  | 0.26289    | 0.26289    | 0.26289    |   0.0 |  0.32
Modify  | 1.4612     | 1.4612     | 1.4612     |   0.0 |  1.78
Other   |            | 1.733      |            |       |  2.11

Nlocal:    2431 ave 2431 max 2431 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    16166 ave 16166 max 16166 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    1158 ave 1158 max 1158 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1158
Ave neighs/atom = 0.476347
Ave special neighs/atom = 6.58988
Neighbor list builds = 1
Dangerous builds = 0
unfix           3
#unfix           4
unfix           5
undump          NiPyC2_experiment_with_Xe_xyzmov


### NOTE:
# These fixes are overkill if you simply want to hold a collection of atoms stationary.
# A simpler way to hold atoms stationary is to not include those atoms in your time integration.
#
# The force and torque keywords discussed next are only allowed for the rigid styles
# An xflag, yflag, or zflag set to off means turn off the component of force of torque in that dimension.
#  if you expect a rigid body not to move or rotate by using these keywords, you must insure its initial
# center-of-mass translational or angular velocity is 0.0.
# Otherwise the initial translational or angular momentum the body has will persist.
###
Total wall time: 0:01:22

# --------------------------------- Initialization -------------------------------------- #
units           real
atom_style      full
boundary        p p p

pair_style      lj/cut 14.000
bond_style      harmonic
angle_style     cosine/periodic
dihedral_style  harmonic
improper_style  fourier

special_bonds   lj/coul 0.0 0.0 1.0
pair_modify     tail no mix arithmetic
#dielectric      1.0
box tilt        large
read_data       data.NiPyC2_experiment_with_Xe
  triclinic box = (0 0 0) to (31.264 37.5702 30.8228) with tilt (0 -0.682783 0)
  1 by 1 by 1 MPI processor grid
  reading atoms ...
  2431 atoms
  scanning bonds ...
  6 = max bonds/atom
  scanning angles ...
  15 = max angles/atom
  scanning dihedrals ...
  8 = max dihedrals/atom
  scanning impropers ...
  3 = max impropers/atom
  reading bonds ...
  2880 bonds
  reading angles ...
  5490 angles
  reading dihedrals ...
  5760 dihedrals
  reading impropers ...
  3780 impropers
  6 = max # of 1-2 neighbors
  9 = max # of 1-3 neighbors
  12 = max # of special neighbors
  special bonds CPU = 0.000738352 secs
  read_data CPU = 0.0408965 secs

#### Atom Groupings ####
group           xe       id   55
1 atoms in group xe
group           fram     id   1:54 56:2431
2430 atoms in group fram
#### END Atom Groupings ####

###
# Speed up Calculations by exluding framework-framework interactions
#   since we are keeping the framework rigid and stationary
#
# neigh_modify keyword values ...
# keyword = exclude
# values  = group group1-ID group2-ID
#
# group1-ID, group2-ID = exclude if one atom is in 1st group, other in 2nd
###
neigh_modify exclude group fram fram

# ----------------------------- Variables ---------------------- #
dump            NiPyC2_experiment_with_Xe_xyzmov all xyz 5000 NiPyC2_experiment_with_Xe_mov.xyz
dump_modify     NiPyC2_experiment_with_Xe_xyzmov element Ni O N C H Xe
variable        dt         equal 1.00
variable        tdamp      equal 100*${dt}
variable        tdamp      equal 100*1
variable        eqtemp     equal 298.00

# ------------------------------ Equilibriation -------------------------------------------- #
# we do not need to perform equilibriation since we are using a rigid framework
# and the (single) adsorbate has already been inserted into the material via GCMC
# which already included an equilibriation phase.
#fix             1 xe langevin ${eqtemp} ${eqtemp} ${tdamp} 8646
#fix             2 xe nve
#fix             3 fram langevin 298.00 298.00 ${tdamp} 965287
#fix             4 fram nve
#thermo          0
#run             50000
#unfix           1
#unfix           2
#unfix           3
#unfix           4

# --------------------- Production (data gathering) --------------------------------------- #
# A simple way to hold atoms stationary is to not include those atoms in your time integration.
#reset_timestep  0

fix             3 xe nvt temp ${eqtemp} ${eqtemp} ${tdamp}
fix             3 xe nvt temp 298 ${eqtemp} ${tdamp}
fix             3 xe nvt temp 298 298 ${tdamp}
fix             3 xe nvt temp 298 298 100
#fix             4 fram rigid/nvt group 1 fram temp ${eqtemp} ${eqtemp} ${tdamp} # hold MOF atoms fixed
#fix             6 fram nvt temp 298.00 298.00 ${tdamp}

###
#  mean-squared disp of grp 1
#
# A vector of four quantities is calculated by this compute:
# The first 3 elements of the vector are the squared dx,dy,dz displacements, summed and averaged over atoms in the group.
# The fourth element is the total squared displacement, i.e. (dx*dx + dy*dy + dz*dz),
#  summed and averaged over atoms in the group.
#
# The slope of the MSD versus time is proportional to the diffusion coefficient.
# MSD values can be accumulated in a vector via the fix vector command,
#   and a line fit to the vector to compute its slope via the variable slope function,
#   and thus extract D.
#
# fix ID group-ID vector Nevery value1 value2 ...
#
# c_ID[I] = Ith component of global vector calculated by a compute with ID
# f_ID = global scalar calculated by a fix with ID
# v_name = value calculated by an equal-style variable with name
#
# variable name style args...
#
# The slope() function uses linear regression to fit a line to the set of points,
#   equally spaced by 1 in their x coordinate: (1,V1), (2,V2), â€¦, (N,VN),
#   where the Vi are the values in the global vector of length N.
#   The returned value is the slope of the line.
#   If the line has a single point or is vertical, it returns 1.0e20.
###
compute         msd all msd com yes
#variable        twopoint equal c_msd[4]/6/(step*dt+1.0e-6) # scaled r_sqr(t)... not used? idk what this is for...
fix             5 xe vector 5 c_msd[4]
variable        fitslope equal slope(f_5)/6/(5*dt) # why dividing slope?

thermo_style    custom step v_eqtemp c_msd[4] v_fitslope # prints this info to log file

thermo          5000
run             200000
Neighbor list info ...
  update every 1 steps, delay 10 steps, check yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 16
  ghost atom cutoff = 16
  binsize = 8, bins = 4 5 4
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair lj/cut, perpetual
      attributes: half, newton on
      pair build: half/bin/newton/tri
      stencil: half/bin/3d/newton/tri
      bin: standard
WARNING: Inconsistent image flags (src/domain.cpp:785)
Per MPI rank memory allocation (min/avg/max) = 31.83 | 31.83 | 31.83 Mbytes
Step v_eqtemp c_msd[4] v_fitslope 
       0          298 7.572221e-30 3.3333333e+18 
    5000          298 0.00029532742 2.8146487e-09 
   10000          298 0.00016173486 2.2860171e-09 
   15000          298 9.5979274e-05 1.8836986e-10 
   20000          298 0.00040715404 1.7299023e-10 
   25000          298 0.00020756223 2.9637596e-10 
   30000          298 1.0029512e-05 -3.6546962e-11 
   35000          298 0.00027965815 1.0497096e-11 
   40000          298 0.00010987207 2.1261975e-10 
   45000          298 8.6620405e-06 4.487653e-11 
   50000          298 0.00019184802 3.5440289e-11 
   55000          298 0.00025073619 1.4156713e-10 
   60000          298 1.6807414e-05 1.073004e-10 
   65000          298 6.4019964e-05 2.2739048e-11 
   70000          298 0.00041603247 6.3027375e-11 
   75000          298 6.1881765e-05 5.754579e-11 
   80000          298 0.00014475642 1.0601188e-11 
   85000          298 0.00046117676  1.29227e-11 
   90000          298 0.00013546271 3.2065276e-11 
   95000          298 0.00010863514 9.3856568e-12 
  100000          298 0.00045302322 2.8662571e-12 
  105000          298 0.00017254474 2.7046755e-11 
  110000          298 7.3527309e-05 1.6453467e-11 
  115000          298 0.00026116731 5.0309854e-13 
  120000          298 0.00037881639 1.9585909e-11 
  125000          298 0.00023932912 2.9486757e-11 
  130000          298 0.00015222103 3.3346813e-11 
  135000          298 0.00024695307 3.4187333e-11 
  140000          298 0.00021077144 4.2131788e-11 
  145000          298 2.0382661e-05 3.012214e-11 
  150000          298 0.00010172169 1.772867e-11 
  155000          298 0.00033235675 2.2233085e-11 
  160000          298 0.00014492063 2.5037638e-11 
  165000          298 0.00018772988 2.2424977e-11 
  170000          298 0.00025503239 2.7425475e-11 
  175000          298 3.5025365e-05 2.4167715e-11 
  180000          298 3.9337747e-05 1.3904877e-11 
  185000          298 0.00037161983 1.3730314e-11 
  190000          298 0.00023752946 1.7441405e-11 
  195000          298 0.00019060678 1.7421279e-11 
  200000          298 0.00037784419 1.6486331e-11 
Loop time of 164.093 on 1 procs for 200000 steps with 2431 atoms

Performance: 105.306 ns/day, 0.228 hours/ns, 1218.821 timesteps/s
100.0% CPU use with 1 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 3.5719     | 3.5719     | 3.5719     |   0.0 |  2.18
Bond    | 142.38     | 142.38     | 142.38     |   0.0 | 86.77
Neigh   | 0.070843   | 0.070843   | 0.070843   |   0.0 |  0.04
Comm    | 11.391     | 11.391     | 11.391     |   0.0 |  6.94
Output  | 0.11089    | 0.11089    | 0.11089    |   0.0 |  0.07
Modify  | 2.942      | 2.942      | 2.942      |   0.0 |  1.79
Other   |            | 3.622      |            |       |  2.21

Nlocal:    2431 ave 2431 max 2431 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:    16166 ave 16166 max 16166 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:    1158 ave 1158 max 1158 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 1158
Ave neighs/atom = 0.476347
Ave special neighs/atom = 6.58988
Neighbor list builds = 1
Dangerous builds = 0
unfix           3
#unfix           4
unfix           5
undump          NiPyC2_experiment_with_Xe_xyzmov


### NOTE:
# These fixes are overkill if you simply want to hold a collection of atoms stationary.
# A simpler way to hold atoms stationary is to not include those atoms in your time integration.
#
# The force and torque keywords discussed next are only allowed for the rigid styles
# An xflag, yflag, or zflag set to off means turn off the component of force of torque in that dimension.
#  if you expect a rigid body not to move or rotate by using these keywords, you must insure its initial
# center-of-mass translational or angular velocity is 0.0.
# Otherwise the initial translational or angular momentum the body has will persist.
###
Total wall time: 0:02:44
