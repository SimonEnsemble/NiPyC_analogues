# generate simulation log file
log             log.NiPyC2_experiment_with_Xe append

# --------------------------------- Initialization -------------------------------------- #
units           real
atom_style      full
boundary        p p p

pair_style      lj/cut 14.000
bond_style      harmonic
angle_style     cosine/periodic
dihedral_style  harmonic
improper_style  fourier

special_bonds   lj/coul 0.0 0.0 1.0
pair_modify     tail no mix arithmetic
#dielectric      1.0
box tilt        large
read_data       data.NiPyC2_experiment_with_Xe

#### Atom Groupings ####
group           xe       id   2431 
group           fram     id   1:2430 
#### END Atom Groupings ####

###
# Fixes are overkill if you simply want to hold a collection of atoms stationary.
# A simpler way to hold atoms stationary is to not include those atoms in your time integration.
# 
# Speed up Calculations by exluding framework-framework interactions
# since we are keeping the framework rigid and stationary.
# 
# neigh_modify keyword values ...
# keyword = exclude
# values  = group group1-ID group2-ID
# 
# group1-ID, group2-ID = exclude if one atom is in 1st group, other in 2nd
###
#neigh_modify exclude group fram fram 

# ----------------------------- Variables ---------------------- #
dump            NiPyC2_experiment_with_Xe_xyzmov all xyz 100 NiPyC2_experiment_with_Xe_mov.xyz
dump_modify     NiPyC2_experiment_with_Xe_xyzmov element Ni O N C H Xe
variable        dt         equal 1.00
variable        tdamp      equal 100*${dt}
variable        eqtemp     equal 298.00

# ------------------------------ Equilibriation -------------------------------------------- #
# The fix momentum command can be used to insure the entire collection of atoms (or a subset of them) 
# does not drift or rotate during the simulation due to random perturbations (e.g. fix langevin thermostatting).
fix             1 xe langevin ${eqtemp} ${eqtemp} ${tdamp} 523910
fix             2 xe nve
fix             3 fram langevin 298.00 298.00 ${tdamp} 965287
fix             4 fram nve
fix             8 all momentum 1 linear 1 1 1 angular
thermo          0
run             200000
unfix           1
unfix           2
unfix           3
unfix           4
unfix           8

# --------------------- Production (data gathering) --------------------------------------- #
# A simple way to hold atoms stationary is to not include those atoms in your time integration.
reset_timestep  0

fix             5 xe nvt temp ${eqtemp} ${eqtemp} ${tdamp}
fix             6 fram nvt temp ${eqtemp} ${eqtemp} ${tdamp}

### 
#  mean-squared disp of grp 1 
#
# A vector of four quantities is calculated by this compute: 
# The first 3 elements of the vector are the squared dx,dy,dz displacements, summed and averaged over atoms in the group. 
# The fourth element is the total squared displacement, i.e. (dx*dx + dy*dy + dz*dz), 
#  summed and averaged over atoms in the group.
#
# The displacement of an atom is from its reference position. 
# This is normally the original position at the time the compute command was issued, unless the average keyword is set to yes. 
# The value of the displacement will be 0.0 for atoms not in the specified compute group.
# The slope of the MSD versus time is proportional to the diffusion coefficient.
# 
# MSD values can be accumulated in a vector via the fix vector command, 
#   and a line fit to the vector to compute its slope via the variable slope function, 
#   and thus extract D.
#
# fix ID group-ID vector Nevery value1 value2 ...
#
# c_ID[I] = Ith component of global vector calculated by a compute with ID 
# f_ID = global scalar calculated by a fix with ID
# v_name = value calculated by an equal-style variable with name
# 
# variable name style args...
# 
# The slope() function uses linear regression to fit a line to the set of points, 
#   equally spaced by 1 in their x coordinate: (1,V1), (2,V2), â€¦, (N,VN), 
#   where the Vi are the values in the global vector of length N. 
#   The returned value is the slope of the line. 
#   If the line has a single point or is vertical, it returns 1.0e20.
###
compute         msd all msd com yes       # define comupte 
fix             7 xe vector 10 c_msd[4]   # what and how often to evaluate compute
variable        fitslope equal slope(f_7) # calculate diffusion coeff
# note: slope function treats timestep=1, but time between evals is 500*dt, hence the scaling factor

thermo_style    custom step v_eqtemp c_msd[4] v_fitslope # prints this info to log file

thermo          50
run             5000000
unfix           5
unfix           6
unfix           7
undump          NiPyC2_experiment_with_Xe_xyzmov


